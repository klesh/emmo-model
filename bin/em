#!/usr/bin/env node

var argv = require('yargs').argv;
var _ = require('lodash');
var moment = require('moment');
var path = require('path');
var fs = require('fs');
var em = require('../index.js');
var Sql = require('../lib/sql.js');
var util = require('util');
var argv = require('yargs').argv;

var command = argv._[0];

var commanders = {
  // create sql migration script under migrations/ folder with specify name
  migrate: function(argv) {
    var name = argv._[1];
    if (!name)
      return console.log('Please assign migration name');

    var config = require(path.resolve(argv.config || './em.json'));
    em.init(config);
    return em.scope(function(db) {
      return db.one('_Migration', {order: {uid: 'DESC'}, limit: 1});
    }).then(function(lastMigration) {
      var uid = moment().format('YYYYMMDDHHmmss') * 1;
      var fullName = uid + '-' + name + '.sql';
      var lastModels = JSON.parse(lastMigration.models);
      var migrator = em.getMigrator();
      var migrateScript = [
        Sql.migrateScript(config.dialect, lastModels, migrator.purified),
        util.format('INSERT INTO %s (%s) VALUES (%s)' + em.agent.separator,
                   em.agent.quote('_Migrations'),
                   ['uid', 'name', 'models'].map(em.agent.quote).join(', '),
                   [uid, fullName, migrator.getModelsJSON().replace(/'/g, "''")].map(function(c){
                     return util.format("'%s'", c);
                   }))
      ].join('\n');

      var migrationsPath = path.resolve(em.migrationsPath);
      if (!fs.existsSync(migrationsPath)) fs.mkdirSync(migrationsPath);

      return fs.writeFile(path.resolve(em.migrationsPath, fullName), migrateScript, function() {
        console.log("Migration %s is created successfully.", fullName);
        process.exit(0);
      });
    });
  },
  // create em.json file, models/ and migrations/ folders in current folder
  init: function(argv) {
    var configPath = path.resolve('./em.json');
    fs.exists(configPath, function(exists) {
      if (exists)
        return console.log('em.json already exists.');

      var samplePath = path.resolve(__dirname, '../tpl/', 'em.json');
      var sample = require(samplePath);
      var projectName = path.basename(path.resolve('./'));
      sample.database = projectName;
      fs.writeFileSync(configPath, JSON.stringify(sample, null, 2));

      var modelsPath = path.resolve('./models');
      if (!fs.existsSync(modelsPath))
        fs.mkdirSync(modelsPath);
      var migrationsPath = path.resolve('./migrations');
      if (!fs.existsSync(migrationsPath))
        fs.mkdirSync(migrationsPath);
      console.log('em.json has been created successfully.');
    });
  },
  // to create or migrate database into newest state
  sync: function(argv) {
    /*
    var config = require(path.resolve('./em.json'));
    em.init(config);
    */
    em.init();
    em.sync().then(function() {
      console.log('sync finish successfully');
      process.exit(0);
    });
  },
  // to dump current models definition into database, for adapting to existing database
  rebase: function() {
    em.init();
    em.rebase().then(function() {
      console.log('rebase models definition into databases finish successfully');
      process.exit(0);
    });
  }
};

if (commanders.hasOwnProperty(command)) {
  commanders[command](argv);
} else {
  console.log('Usage: em <command>');
  console.log();
  console.log('where <command> is one of:');
  console.log('  ' + _.keys(commanders).join(', '));
}
